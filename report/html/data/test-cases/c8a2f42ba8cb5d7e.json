{
  "uid" : "c8a2f42ba8cb5d7e",
  "name" : "test_Add_User[新增员工]",
  "fullName" : "test_case.Employee_Manage.test_Add_User.TestAddUser#test_Add_User",
  "historyId" : "fe3b65bf96a02b37397f7ce9bc41a179",
  "time" : {
    "start" : 1689065371359,
    "stop" : 1689065371423,
    "duration" : 64
  },
  "description" : "\n        :param :\n        :return:\n        ",
  "descriptionHtml" : "<pre><code>    :param :\n    :return:\n</code></pre>\n",
  "status" : "failed",
  "statusMessage" : "AssertionError",
  "statusTrace" : "self = <test_Add_User.TestAddUser object at 0x000001FB347F6D90>\nin_data = {'assert_data': {'Code': {'AssertType': None, 'jsonpath': '$.code', 'type': '==', 'value': 0}, 'Status': {'AssertType'...ne, 'data': {'agentNo': None, 'id': None, 'name': '自动化测试员工', 'phone': 19893647823, ...}, 'dependence_case': False, ...}\ncase_skip = None\n\n    @allure.story(\"员工操作\")\n    @pytest.mark.parametrize('in_data', eval(re_data), ids=[i['detail'] for i in TestData])\n    def test_Add_User(self, in_data, case_skip):\n        \"\"\"\n        :param :\n        :return:\n        \"\"\"\n        res = RequestControl(in_data).http_request()\n        TearDownHandler(res).teardown_handle()\n>       Assert(in_data['assert_data']).assert_equality(response_data=res.response_data,\n                                                       sql_data=res.sql_data, status_code=res.status_code)\n\ntest_case\\Employee_Manage\\test_Add_User.py:36: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\nutils\\assertion\\assertion_control.py:155: in assert_equality\n    self.assert_type_handle(\nutils\\assertion\\assertion_control.py:123: in assert_type_handle\n    self.functions_mapping[name](resp_data[0], assert_value, message)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\ncheck_value = 1, expect_value = 0, message = ''\n\n    def equals(\n            check_value: Any, expect_value: Any, message: Text =\"\"\n    ):\n        \"\"\"判断是否相等\"\"\"\n    \n>       assert check_value == expect_value , message\nE       AssertionError\n\nutils\\assertion\\assert_type.py:22: AssertionError",
  "flaky" : false,
  "newFailed" : false,
  "beforeStages" : [ {
    "name" : "_session_faker",
    "time" : {
      "start" : 1689065364018,
      "stop" : 1689065364073,
      "duration" : 55
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "shouldDisplayMessage" : false,
    "attachmentsCount" : 0,
    "stepsCount" : 0,
    "hasContent" : false
  }, {
    "name" : "case_skip",
    "time" : {
      "start" : 1689065371359,
      "stop" : 1689065371359,
      "duration" : 0
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "shouldDisplayMessage" : false,
    "attachmentsCount" : 0,
    "stepsCount" : 0,
    "hasContent" : false
  } ],
  "testStage" : {
    "description" : "\n        :param :\n        :return:\n        ",
    "status" : "failed",
    "statusMessage" : "AssertionError",
    "statusTrace" : "self = <test_Add_User.TestAddUser object at 0x000001FB347F6D90>\nin_data = {'assert_data': {'Code': {'AssertType': None, 'jsonpath': '$.code', 'type': '==', 'value': 0}, 'Status': {'AssertType'...ne, 'data': {'agentNo': None, 'id': None, 'name': '自动化测试员工', 'phone': 19893647823, ...}, 'dependence_case': False, ...}\ncase_skip = None\n\n    @allure.story(\"员工操作\")\n    @pytest.mark.parametrize('in_data', eval(re_data), ids=[i['detail'] for i in TestData])\n    def test_Add_User(self, in_data, case_skip):\n        \"\"\"\n        :param :\n        :return:\n        \"\"\"\n        res = RequestControl(in_data).http_request()\n        TearDownHandler(res).teardown_handle()\n>       Assert(in_data['assert_data']).assert_equality(response_data=res.response_data,\n                                                       sql_data=res.sql_data, status_code=res.status_code)\n\ntest_case\\Employee_Manage\\test_Add_User.py:36: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\nutils\\assertion\\assertion_control.py:155: in assert_equality\n    self.assert_type_handle(\nutils\\assertion\\assertion_control.py:123: in assert_type_handle\n    self.functions_mapping[name](resp_data[0], assert_value, message)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\ncheck_value = 1, expect_value = 0, message = ''\n\n    def equals(\n            check_value: Any, expect_value: Any, message: Text =\"\"\n    ):\n        \"\"\"判断是否相等\"\"\"\n    \n>       assert check_value == expect_value , message\nE       AssertionError\n\nutils\\assertion\\assert_type.py:22: AssertionError",
    "steps" : [ {
      "name" : "请求URL: https://api.pre.lianok.com/agent/v1/user/addUser",
      "time" : {
        "start" : 1689065371421,
        "stop" : 1689065371421,
        "duration" : 0
      },
      "status" : "passed",
      "steps" : [ ],
      "attachments" : [ ],
      "parameters" : [ ],
      "shouldDisplayMessage" : false,
      "attachmentsCount" : 0,
      "stepsCount" : 0,
      "hasContent" : false
    }, {
      "name" : "请求方式: POST",
      "time" : {
        "start" : 1689065371421,
        "stop" : 1689065371421,
        "duration" : 0
      },
      "status" : "passed",
      "steps" : [ ],
      "attachments" : [ ],
      "parameters" : [ ],
      "shouldDisplayMessage" : false,
      "attachmentsCount" : 0,
      "stepsCount" : 0,
      "hasContent" : false
    }, {
      "name" : "请求头: ",
      "time" : {
        "start" : 1689065371421,
        "stop" : 1689065371421,
        "duration" : 0
      },
      "status" : "passed",
      "steps" : [ ],
      "attachments" : [ {
        "uid" : "54079ceb79ae0746",
        "name" : "请求头: ",
        "source" : "54079ceb79ae0746.json",
        "type" : "application/json",
        "size" : 235
      } ],
      "parameters" : [ ],
      "shouldDisplayMessage" : false,
      "attachmentsCount" : 1,
      "stepsCount" : 0,
      "hasContent" : true
    }, {
      "name" : "请求数据: ",
      "time" : {
        "start" : 1689065371421,
        "stop" : 1689065371421,
        "duration" : 0
      },
      "status" : "passed",
      "steps" : [ ],
      "attachments" : [ {
        "uid" : "c3752e80856ac8b3",
        "name" : "请求数据: ",
        "source" : "c3752e80856ac8b3.json",
        "type" : "application/json",
        "size" : 136
      } ],
      "parameters" : [ ],
      "shouldDisplayMessage" : false,
      "attachmentsCount" : 1,
      "stepsCount" : 0,
      "hasContent" : true
    }, {
      "name" : "预期数据: ",
      "time" : {
        "start" : 1689065371421,
        "stop" : 1689065371421,
        "duration" : 0
      },
      "status" : "passed",
      "steps" : [ ],
      "attachments" : [ {
        "uid" : "5aba2b75ba4da6fa",
        "name" : "预期数据: ",
        "source" : "5aba2b75ba4da6fa.json",
        "type" : "application/json",
        "size" : 182
      } ],
      "parameters" : [ ],
      "shouldDisplayMessage" : false,
      "attachmentsCount" : 1,
      "stepsCount" : 0,
      "hasContent" : true
    }, {
      "name" : "响应耗时(ms): 59",
      "time" : {
        "start" : 1689065371421,
        "stop" : 1689065371421,
        "duration" : 0
      },
      "status" : "passed",
      "steps" : [ ],
      "attachments" : [ ],
      "parameters" : [ ],
      "shouldDisplayMessage" : false,
      "attachmentsCount" : 0,
      "stepsCount" : 0,
      "hasContent" : false
    }, {
      "name" : "响应结果: ",
      "time" : {
        "start" : 1689065371421,
        "stop" : 1689065371421,
        "duration" : 0
      },
      "status" : "passed",
      "steps" : [ ],
      "attachments" : [ {
        "uid" : "d4eb9493256ff3ee",
        "name" : "响应结果: ",
        "source" : "d4eb9493256ff3ee.json",
        "type" : "application/json",
        "size" : 98
      } ],
      "parameters" : [ ],
      "shouldDisplayMessage" : false,
      "attachmentsCount" : 1,
      "stepsCount" : 0,
      "hasContent" : true
    } ],
    "attachments" : [ {
      "uid" : "f58bbf087246a1a2",
      "name" : "log",
      "source" : "f58bbf087246a1a2.txt",
      "type" : "text/plain",
      "size" : 831
    } ],
    "parameters" : [ ],
    "shouldDisplayMessage" : true,
    "attachmentsCount" : 5,
    "stepsCount" : 7,
    "hasContent" : true
  },
  "afterStages" : [ ],
  "labels" : [ {
    "name" : "epic",
    "value" : "服务商后台接口"
  }, {
    "name" : "feature",
    "value" : "员工管理模块"
  }, {
    "name" : "story",
    "value" : "员工操作"
  }, {
    "name" : "parentSuite",
    "value" : "test_case.Employee_Manage"
  }, {
    "name" : "suite",
    "value" : "test_Add_User"
  }, {
    "name" : "subSuite",
    "value" : "TestAddUser"
  }, {
    "name" : "host",
    "value" : "puti"
  }, {
    "name" : "thread",
    "value" : "3416-MainThread"
  }, {
    "name" : "framework",
    "value" : "pytest"
  }, {
    "name" : "language",
    "value" : "cpython3"
  }, {
    "name" : "package",
    "value" : "test_case.Employee_Manage.test_Add_User"
  }, {
    "name" : "resultFormat",
    "value" : "allure2"
  } ],
  "parameters" : [ {
    "name" : "in_data",
    "value" : "{'url': 'https://api.pre.lianok.com/agent/v1/user/addUser', 'method': 'POST', 'detail': '新增员工', 'assert_data': {'status_code': 200, 'Code': {'jsonpath': '$.code', 'type': '==', 'value': 0, 'AssertType': None}, 'Status': {'jsonpath': '$.status', 'type': '==', 'value': 0, 'AssertType': None}}, 'headers': {'Content-Type': 'application/json', 'accesstoken': '$cache{login_cookie}'}, 'requestType': 'JSON', 'is_run': True, 'data': {'agentNo': None, 'id': None, 'name': '自动化测试员工', 'phone': 19893647823, 'remark': '自动化测试员工', 'roleId': 159}, 'dependence_case': False, 'dependence_case_data': None, 'sql': None, 'setup_sql': None, 'status_code': None, 'teardown_sql': None, 'teardown': None, 'current_request_set_cache': None, 'sleep': None}"
  } ],
  "links" : [ ],
  "hidden" : false,
  "retry" : false,
  "extra" : {
    "severity" : "normal",
    "retries" : [ ],
    "categories" : [ {
      "name" : "Product defects",
      "matchedStatuses" : [ ],
      "flaky" : false
    } ],
    "tags" : [ ]
  },
  "source" : "c8a2f42ba8cb5d7e.json",
  "parameterValues" : [ "{'url': 'https://api.pre.lianok.com/agent/v1/user/addUser', 'method': 'POST', 'detail': '新增员工', 'assert_data': {'status_code': 200, 'Code': {'jsonpath': '$.code', 'type': '==', 'value': 0, 'AssertType': None}, 'Status': {'jsonpath': '$.status', 'type': '==', 'value': 0, 'AssertType': None}}, 'headers': {'Content-Type': 'application/json', 'accesstoken': '$cache{login_cookie}'}, 'requestType': 'JSON', 'is_run': True, 'data': {'agentNo': None, 'id': None, 'name': '自动化测试员工', 'phone': 19893647823, 'remark': '自动化测试员工', 'roleId': 159}, 'dependence_case': False, 'dependence_case_data': None, 'sql': None, 'setup_sql': None, 'status_code': None, 'teardown_sql': None, 'teardown': None, 'current_request_set_cache': None, 'sleep': None}" ]
}